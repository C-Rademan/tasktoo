/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package xml.reader; //do not change this


//imports
import java.io.InputStream;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringWriter;
import javax.xml.transform.Transformer;
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.w3c.dom.Node;
import java.util.HashMap;



public class App {
    public static void main(String[] args) {
        try {
            // Get the input stream to the XML file
            InputStream inputStream = App.class.getClassLoader().getResourceAsStream("data.xml");
    
            // Create a DocumentBuilderFactory
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    
            // Create a DocumentBuilder from the factory
            DocumentBuilder builder = factory.newDocumentBuilder();
    
            // Parse the input stream into a Document
            Document doc = builder.parse(inputStream);
    
            // Use a Transformer to serialize the document to a string
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));
            //String xmlString = writer.toString();
            //System.out.println(xmlString);
            
            //let the user choose fields
            String[] fieldsArray = getSelectedFields();
            List<String> fieldsList = Arrays.asList(fieldsArray);
            // Call the printFields method to print out the field values
            printFields(doc,fieldsList);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static String[] getSelectedFields() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter field names separated by commas: ");
        String input = scanner.nextLine();
        String[] selectedFields = input.split(",");
        for (int i = 0; i < selectedFields.length; i++) {
            selectedFields[i] = selectedFields[i].trim();
        }
        scanner.close();
        return selectedFields;
    }
    
    public static void printFields(Document doc, List<String> selectedFields) {
        // Get the root element
        Element root = doc.getDocumentElement();
    
        // Get the list of record nodes
        NodeList recordNodes = root.getElementsByTagName("record");
    
        // Loop through the record nodes
        for (int i = 0; i < recordNodes.getLength(); i++) {
            Element recordElement = (Element) recordNodes.item(i);
    
            // Create a map to store the field values for this record
            Map<String, String> fieldValues = new HashMap<>();
    
            // Loop through the child nodes of this record and store their values in the map
            NodeList childNodes = recordElement.getChildNodes();
            for (int j = 0; j < childNodes.getLength(); j++) {
                Node childNode = childNodes.item(j);
                if (childNode.getNodeType() == Node.ELEMENT_NODE) {
                    String fieldName = childNode.getNodeName();
                    String fieldValue = childNode.getTextContent();
                    fieldValues.put(fieldName, fieldValue);
                }
            }
    
            // Print out the selected fields for this record
            System.out.println("Record #" + (i + 1) + ":");
            for (String fieldName : selectedFields) {
                if (fieldValues.containsKey(fieldName)) {
                    String fieldValue = fieldValues.get(fieldName);
                    System.out.println("  " + fieldName + ": " + fieldValue);
                } else {
                    System.out.println("  " + fieldName + ": (not found)");
                }
            }
        }
    }//
    
    
}
